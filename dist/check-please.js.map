{"version":3,"file":"check-please.js","sources":["../src/index.js"],"sourcesContent":["import type from '@tiaanduplessis/type'\n\n/**\n * Apply multiple validation functions to a value\n * @param {Function} funcs Validation function to apply\n *\n * @example\n * const isRequired = check(exists(\"It should exist\"))\n * isRequired(\"value\")\n */\nexport function check (...funcs) {\n  return val => {\n    for (let i = 0; i < funcs.length; i++) {\n      const current = funcs[i]\n\n      if (type.isFunc(current)) {\n        const result = current(val)\n        if (!result.valid) {\n          return result\n        }\n      }\n    }\n    return { valid: true, message: '' }\n  }\n}\n\n/**\n * Helper wrapper for creating validation function\n * @param {Function} func Function used for validation\n *\n * @example\n *\n * function longerThanFive(msg) {\n *  return checkWrapper(val => val.length > 5)(msg)\n * }\n */\nexport function checkWrapper (func = () => true) {\n  return (msg = '') => {\n    return val => {\n      const result = func(val)\n      return {\n        valid: result,\n        message: result ? '' : msg\n      }\n    }\n  }\n}\n\n/**\n * Check if value exists\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function exists (msg) {\n  return checkWrapper(val => !type.isEmpty(val))(msg)\n}\n\n/**\n * Check if value does not exist\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function empty (msg) {\n  return checkWrapper(type.isEmpty)(msg)\n}\n\n/**\n * Check if value is Boolean\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function bool (msg) {\n  return checkWrapper(type.isBool)(msg)\n}\n\n/**\n * Check if value is Integer\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function int (msg) {\n  return checkWrapper(val => type.isNum(val) && Number.isInteger(val))(msg)\n}\n\n/**\n * Check if value is Number\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function num (msg) {\n  return checkWrapper(type.isNum)(msg)\n}\n\n/**\n * Check if value is String\n *\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n */\nexport function str (msg) {\n  return checkWrapper(type.isStr)(msg)\n}\n\n/**\n * Check if value matches given regex pattern\n *\n * @param {RegExp} pattern\n * @param {String=} msg Message when validation fails\n *\n * @returns {Function}\n *\n * @example\n *\n * check(pattern(/foo/), exists())\n */\nexport function pattern (pattern, msg) {\n  return checkWrapper(val => pattern && val && pattern.test(val))(msg)\n}\n\n/**\n *\n * @param {*} val\n * @param {*} msg\n */\nexport function exact (val, msg) {\n  return checkWrapper(cur => val && cur && val === cur)(msg)\n}\n"],"names":["checkWrapper","func","msg","val","const","result","valid","message","let","i","funcs","length","current","type","isFunc","isEmpty","isBool","isNum","Number","isInteger","isStr","pattern","test","cur"],"mappings":"2FAoCO,SAASA,EAAcC,GAC5B,wCADyC,aACjCC,yBAAM,aACLC,GACLC,IAAMC,EAASJ,EAAKE,GACpB,OACEG,MAAOD,EACPE,QAASF,EAAS,GAAKH,mBAhCxB,kEACL,gBAAOC,GACL,IAAKK,IAAIC,EAAI,EAAGA,EAAIC,EAAMC,OAAQF,IAAK,CACrCL,IAAMQ,EAAUF,EAAMD,GAEtB,GAAII,EAAKC,OAAOF,GAAU,CACxBR,IAAMC,EAASO,EAAQT,GACvB,IAAKE,EAAOC,MACV,OAAOD,GAIb,OAASC,OAAO,EAAMC,QAAS,4CAiC5B,SAAiBL,GACtB,OAAOF,WAAaG,UAAQU,EAAKE,QAAQZ,IAAlCH,CAAwCE,kBAU1C,SAAgBA,GACrB,OAAOF,EAAaa,EAAKE,QAAlBf,CAA2BE,iBAU7B,SAAeA,GACpB,OAAOF,EAAaa,EAAKG,OAAlBhB,CAA0BE,gBAU5B,SAAcA,GACnB,OAAOF,WAAaG,UAAOU,EAAKI,MAAMd,IAAQe,OAAOC,UAAUhB,IAAxDH,CAA8DE,gBAUhE,SAAcA,GACnB,OAAOF,EAAaa,EAAKI,MAAlBjB,CAAyBE,gBAU3B,SAAcA,GACnB,OAAOF,EAAaa,EAAKO,MAAlBpB,CAAyBE,oBAe3B,SAAkBmB,EAASnB,GAChC,OAAOF,WAAaG,UAAOkB,GAAWlB,GAAOkB,EAAQC,KAAKnB,IAAnDH,CAAyDE,kBAQ3D,SAAgBC,EAAKD,GAC1B,OAAOF,WAAauB,UAAOpB,GAAOoB,GAAOpB,IAAQoB,GAA1CvB,CAA+CE"}